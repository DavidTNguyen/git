[user]
	email = davidnguy@gmail.com
	name = David Nguyen
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
[alias]
    #quick look at all repo
    loggsa = log --color --date-order --graph --oneline --decorate --simplify-by-decoration --all
    #quick look at active branch (or refs pointed)
    loggs = log --color --date-order --graph --oneline --decorate --simplify-by-decoration
    #extend look at all repo
    logga = log --color --date-order --graph --oneline --decorate --all
    #extend look at active branch
    logg = log --color --date-order --graph --oneline --decorate
    #Look with date
    logda = log --color --date-order --date=local --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ad%Creset %C(auto)%d%Creset%s\" --all
    logd = log --color --date-order --date=local --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ad%Creset %C(auto)%d%Creset %s\"
    #Look with relative date
    logdra = log --color --date-order --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ar%Creset %C(auto)%d%Creset %s\" --all
    logdr = log --color --date-order --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ar%Creset %C(auto)%d%Creset %s\"
    loga = log --graph --color --decorate --all
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # For repos without subject body commits (vim repo, git-svn clones)
    logt = log --graph --color --format=\"%C(auto)%h %d %<|(100,trunc) %s\"
    logta = log --graph --color --format=\"%C(auto)%h %d %<|(100,trunc) %s\" --all
    logtsa = log --graph --color --format=\"%C(auto)%h %d %<|(100,trunc) %s\" --all --simplify-by-decoration
    ###########################From Haacked
    co = checkout
    ec = config --global -e
    #Get my working directory up to date.
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    #Starting new work
    cob = checkout -b
    #Adds all changes including untracked files and creates a commit.
    cm = !git add -A && git commit -m
    save = !git add -A && git commit -m 'SAVEPOINT'
    #Only commits tracked changes.
    wip = !git add -u && git commit -m "WIP"
    #When I return to work, I’ll just use git undo which resets the previous commit, but keeps all the changes from that commit in the working directory.
    undo = reset HEAD~1 --mixed
    #If I only need to modify the previous commit, I’ll use git amend
    amend = commit -a --amend
    #Commit everything in my working directory and then does a hard reset to remove that commit. The nice thing is, the commit is still there, but it’s just unreachable.
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    #Completing the pull request
    # 1)Switches to master (though you can specify a different default branch)
    # 2)Runs git up to bring master up to speed with the origin
    # 3)Deletes all branches already merged into master using another alias, git bclean
    bclean = "!f() { git branch ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    # DONE DONE
    # 1)Switch to master (though you can specify a different default branch)
    # 2)Run git up to bring master up to speed with the origin
    # 3)Delete all branches already merged into master using another alias, git bclean
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"